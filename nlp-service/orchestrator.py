"""
Orchestrator —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º reasoning –¥–ª—è –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""
import os
from typing import Dict, Any
from langchain_anthropic import ChatAnthropic
from langchain.agents import AgentExecutor, create_tool_calling_agent
from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder
from datetime import datetime
import pytz

from tools import (
    database_reader_tool,
    database_writer_tool,
    end_sleep_tool,
    time_calculator_tool,
    activity_validator_tool
)

class BabyFlowOrchestrator:
    def __init__(self):
        self.llm = ChatAnthropic(
            model="claude-3-haiku-20240307",  # –ë—ã—Å—Ç—Ä–∞—è –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å
            anthropic_api_key=os.getenv("ANTHROPIC_API_KEY"),
            temperature=0.3
        )

        self.tools = [
            database_reader_tool,
            database_writer_tool,
            end_sleep_tool,
            time_calculator_tool,
            activity_validator_tool
        ]

        self.prompt = ChatPromptTemplate.from_messages([
            ("system", self._get_system_prompt()),
            ("human", "{input}"),
            MessagesPlaceholder(variable_name="agent_scratchpad"),
        ])

        agent = create_tool_calling_agent(self.llm, self.tools, self.prompt)

        self.executor = AgentExecutor(
            agent=agent,
            tools=self.tools,
            verbose=False,
            max_iterations=5,
            handle_parsing_errors=True
        )

    def _get_system_prompt(self) -> str:
        return """–¢—ã - —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞ —Ä–µ–±–µ–Ω–∫–∞. 
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–∞–º—ã –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–±–µ–Ω–∫–∞.
        
        –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π reasoning –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π:
        1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ
        2. –†–µ—à–∞–π –∫–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        3. –í—ã–∑—ã–≤–∞–π –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        4. –§–æ—Ä–º–∏—Ä—É–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –º–∞–º—ã
        
        –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}
        –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ú–æ—Å–∫–≤–∞ (UTC+3)
        
        –¢–ò–ü–´ –°–û–ë–´–¢–ò–ô –∏ –ö–ê–ö –ò–• –ó–ê–ü–ò–°–´–í–ê–¢–¨:
        - "—Å–ø–∏—Ç", "—É—Å–Ω—É–ª", "–∑–∞—Å–Ω—É–ª" ‚Üí database_writer_tool —Å activity_type="sleep"
        - "–ø—Ä–æ—Å–Ω—É–ª—Å—è", "–≤—Å—Ç–∞–ª" ‚Üí —Å–Ω–∞—á–∞–ª–∞ database_reader_tool –Ω–∞–π—Ç–∏ –æ—Ç–∫—Ä—ã—Ç—ã–π —Å–æ–Ω, –ø–æ—Ç–æ–º end_sleep_tool –ë–ï–ó —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        - "–ø–æ–∫—É—à–∞–ª", "–ø–æ–µ–ª", "–ø–æ–∫–æ—Ä–º–∏–ª–∞" ‚Üí database_writer_tool —Å activity_type="feeding"
        - "–≥—É–ª—è–µ–º", "–Ω–∞ –ø—Ä–æ–≥—É–ª–∫–µ" ‚Üí database_writer_tool —Å activity_type="walk"
        - "–ø–æ–∫–∞–∫–∞–ª", "–∫–∞–∫–∞–ª" ‚Üí database_writer_tool —Å activity_type="diaper", type="poop"
        - "–ø–æ–ø–∏—Å–∞–ª", "–ø–∏—Å–∞–ª" ‚Üí database_writer_tool —Å activity_type="diaper", type="pee"
        - "–ø–∞–º–ø–µ—Ä—Å", "–ø–æ–¥–≥—É–∑–Ω–∏–∫" ‚Üí database_writer_tool —Å activity_type="diaper"
        - "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 37.5", "36.6" ‚Üí database_writer_tool —Å activity_type="temperature", temperature=—á–∏—Å–ª–æ
        - "–¥–∞–ª–∏ –Ω—É—Ä–æ—Ñ–µ–Ω", "–≤—ã–ø–∏–ª –ª–µ–∫–∞—Ä—Å—Ç–≤–æ" ‚Üí database_writer_tool —Å activity_type="medication", medication_name –∏ dosage
        
        –ü–†–ê–í–ò–õ–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í:
        1. database_writer_tool –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: activity_type ("sleep"/"feeding"/"walk"), child_id, –∏ –≤—Ä–µ–º—è
        2. –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞—á–∞–ª–∞ —Å–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π: activity_type="sleep" –∏ data —Å child_id –∏ start_time
        3. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–Ω–∞: —Å–Ω–∞—á–∞–ª–∞ database_reader_tool –Ω–∞–π—Ç–∏ –æ—Ç–∫—Ä—ã—Ç—ã–π —Å–æ–Ω, –ø–æ—Ç–æ–º end_sleep_tool
        4. –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        5. child_id –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–≤–∞–π –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        –í–ê–ñ–ù–û: 
        - –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ-—Ä—É—Å—Å–∫–∏
        - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —á—Ç–æ –∑–∞–ø–∏—Å–∞–ª –ë–ï–ó —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π
        - –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–π ID, OBSERVE, reasoning –ø—Ä–æ—Ü–µ—Å—Å
        - –ù–ï –ø–∏—à–∏ "–ê–Ω–∞–ª–∏–∑:", "–î–µ–π—Å—Ç–≤–∏—è:", "–†–µ–∑—É–ª—å—Ç–∞—Ç:"
        - –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∑–∞–±–æ—Ç–ª–∏–≤–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞ –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞
        
        –ü–†–ò–ú–ï–†–´ –û–¢–í–ï–¢–û–í:
        - "‚úÖ –ó–∞–ø–∏—Å–∞–ª–∞: –º–∞–ª—ã—à —É—Å–Ω—É–ª –≤ 14:30"
        - "‚úÖ –ú–∞–ª—ã—à –ø—Ä–æ—Å–Ω—É–ª—Å—è! –°–ø–∞–ª 2 —á–∞—Å–∞ 15 –º–∏–Ω—É—Ç"
        - "üìù –ó–∞–ø–∏—Å–∞–ª–∞ –∫–æ—Ä–º–ª–µ–Ω–∏–µ"
        - "üö∂ –ù–∞—á–∞–ª–∏ –ø—Ä–æ–≥—É–ª–∫—É"
        - "üí© –û—Ç–º–µ—Ç–∏–ª–∞ —Å–º–µ–Ω—É –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞"
        - "üíß –ó–∞–ø–∏—Å–∞–ª–∞, —á—Ç–æ –º–∞–ª—ã—à –ø–æ–ø–∏—Å–∞–ª"
        - "üå°Ô∏è –ó–∞–ø–∏—Å–∞–ª–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É 37.2¬∞C"
        - "üíä –ó–∞–ø–∏—Å–∞–ª–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ: –ù—É—Ä–æ—Ñ–µ–Ω 5–º–ª"
        """.format(current_time=datetime.now(pytz.timezone('Europe/Moscow')).strftime("%Y-%m-%d %H:%M"))

    def process_message(self, message: str, child_id: int = 1) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        enriched_input = f"""
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–∞–º—ã: "{message}"
        ID —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: {child_id}
        
        –ò—Å–ø–æ–ª—å–∑—É–π reasoning:
        1. –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        2. –†–µ—à–∏ –∫–∞–∫–∏–µ tools –Ω—É–∂–Ω—ã
        3. –í—ã–ø–æ–ª–Ω–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–∏—Å–ø–æ–ª—å–∑—É–π child_id={child_id})
        4. –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """

        try:
            result = self.executor.invoke({"input": enriched_input})
            return {
                "success": True,
                "response": result.get("output", "–ó–∞–ø–∏—Å–∞–Ω–æ"),
                "reasoning": self._extract_reasoning(result)
            }
        except Exception as e:
            return {
                "success": False,
                "response": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}",
                "error": str(e)
            }

    def _extract_reasoning(self, result: Dict) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç reasoning –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        if "intermediate_steps" in result:
            steps = []
            for action, observation in result["intermediate_steps"]:
                if hasattr(action, 'tool'):
                    steps.append(f"Tool: {action.tool}, Input: {action.tool_input}")
            return " ‚Üí ".join(steps)
        return "No reasoning available"