import os
import asyncio
import logging
import requests
from datetime import datetime
import pytz
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
NLP_SERVICE_URL = os.getenv("NLP_SERVICE_URL", "http://localhost:8002")
ACTIVITY_SERVICE_URL = os.getenv("ACTIVITY_SERVICE_URL", "http://localhost:8003")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–≤—è–∑–∏ telegram_id —Å user_id –∏ child_id
# –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –ë–î
user_mapping = {}


@dp.message(CommandStart())
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    telegram_id = message.from_user.id
    first_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        response = requests.get(f"{ACTIVITY_SERVICE_URL}/users/telegram/{telegram_id}")
        if response.status_code == 404:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = {
                "telegram_id": telegram_id,
                "username": username,
                "first_name": first_name
            }
            response = requests.post(f"{ACTIVITY_SERVICE_URL}/users/", json=user_data)
            user = response.json()
            await message.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n"
                "–Ø –ê–ª–∏—Å–∞ - –ø–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∞—à–µ–≥–æ –º–∞–ª—ã—à–∞.\n"
                "–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –º–Ω–µ –æ–±—ã—á–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ —É—Å–Ω—É–ª\n"
                "‚Ä¢ –ø—Ä–æ—Å–Ω—É–ª—Å—è\n"
                "‚Ä¢ –ø–æ–∫–æ—Ä–º–∏–ª–∞ 200–º–ª\n"
                "‚Ä¢ –≥—É–ª—è–µ–º –≤ –ø–∞—Ä–∫–µ\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –º–∞–ª—ã—à–∞ –∫–æ–º–∞–Ω–¥–æ–π:\n"
                "/add_child –ò–º—è 2024-01-15"
            )
        else:
            user = response.json()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–µ—Ç–∏
            children_response = requests.get(f"{ACTIVITY_SERVICE_URL}/children/user/{user['id']}")
            children = children_response.json()

            if children:
                child = children[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
                user_mapping[telegram_id] = {"user_id": user["id"], "child_id": child["id"]}
                await message.answer(
                    f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}!\n"
                    f"–ó–∞–ø–∏—Å—ã–≤–∞—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è: {child['name']}\n\n"
                    "–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –º–∞–ª—ã—à–æ–º."
                )
            else:
                await message.answer(
                    f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}!\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π:\n"
                    "/add_child –ò–º—è 2024-01-15"
                )
    except Exception as e:
        logger.error(f"Error in start_handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(Command("add_child"))
async def add_child_handler(message: Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞"""
    telegram_id = message.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id
        response = requests.get(f"{ACTIVITY_SERVICE_URL}/users/telegram/{telegram_id}")
        if response.status_code == 404:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start")
            return

        user = response.json()

        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        parts = message.text.split()
        if len(parts) < 3:
            await message.answer(
                "–§–æ—Ä–º–∞—Ç: /add_child –ò–º—è –ì–ì–ì–ì-–ú–ú-–î–î\n"
                "–ü—Ä–∏–º–µ—Ä: /add_child –°–∞—à–∞ 2024-01-15"
            )
            return

        name = parts[1]
        birth_date = parts[2]

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–±–µ–Ω–∫–∞
        child_data = {
            "user_id": user["id"],
            "name": name,
            "birth_date": birth_date
        }

        response = requests.post(f"{ACTIVITY_SERVICE_URL}/children/", json=child_data)
        if response.status_code == 200:
            child = response.json()
            user_mapping[telegram_id] = {"user_id": user["id"], "child_id": child["id"]}
            await message.answer(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ä–µ–±–µ–Ω–æ–∫: {name}\n"
                f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}\n\n"
                "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!"
            )
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")
    except Exception as e:
        logger.error(f"Error in add_child: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")


@dp.message(Command("today"))
async def today_handler(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    telegram_id = message.from_user.id

    if telegram_id not in user_mapping:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –º–∞–ª—ã—à–∞ —á–µ—Ä–µ–∑ /add_child")
        return

    child_id = user_mapping[telegram_id]["child_id"]

    try:
        response = requests.get(f"{ACTIVITY_SERVICE_URL}/activities/child/{child_id}/today")
        if response.status_code == 200:
            data = response.json()

            text = "üìä *–°–µ–≥–æ–¥–Ω—è —É –º–∞–ª—ã—à–∞:*\n\n"

            # –°–æ–Ω
            if data.get("sleep"):
                text += "üò¥ *–°–æ–Ω:*\n"
                moscow_tz = pytz.timezone('Europe/Moscow')
                for sleep in data["sleep"]:
                    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
                    start_dt = datetime.fromisoformat(sleep["start_time"].replace('Z', '+00:00'))
                    start_moscow = start_dt.astimezone(moscow_tz)
                    start = start_moscow.strftime("%H:%M")

                    if sleep["end_time"]:
                        end_dt = datetime.fromisoformat(sleep["end_time"].replace('Z', '+00:00'))
                        end_moscow = end_dt.astimezone(moscow_tz)
                        end = end_moscow.strftime("%H:%M")
                        duration = sleep.get("duration_minutes", 0)
                        hours = duration // 60
                        minutes = duration % 60
                        if hours > 0:
                            duration_str = f"{hours}—á {minutes}–º–∏–Ω"
                        else:
                            duration_str = f"{minutes} –º–∏–Ω"
                        text += f"‚Ä¢ {start} - {end} ({duration_str})\n"
                    else:
                        text += f"‚Ä¢ –°–ø–∏—Ç —Å {start} üí§\n"

            # –ö–æ—Ä–º–ª–µ–Ω–∏–µ
            if data.get("feeding"):
                text += "\nüçº *–ö–æ—Ä–º–ª–µ–Ω–∏—è:*\n"
                moscow_tz = pytz.timezone('Europe/Moscow')
                for feed in data["feeding"]:
                    time_dt = datetime.fromisoformat(feed["time"].replace('Z', '+00:00'))
                    time_moscow = time_dt.astimezone(moscow_tz)
                    time = time_moscow.strftime("%H:%M")
                    text += f"‚Ä¢ {time}"
                    if feed.get("amount_ml"):
                        text += f" - {feed['amount_ml']}–º–ª"
                    if feed.get("food_name"):
                        text += f" ({feed['food_name']})"
                    text += "\n"

            # –ü—Ä–æ–≥—É–ª–∫–∏
            if data.get("walks"):
                text += "\nüö∂ *–ü—Ä–æ–≥—É–ª–∫–∏:*\n"
                moscow_tz = pytz.timezone('Europe/Moscow')
                for walk in data["walks"]:
                    start_dt = datetime.fromisoformat(walk["start_time"].replace('Z', '+00:00'))
                    start_moscow = start_dt.astimezone(moscow_tz)
                    start = start_moscow.strftime("%H:%M")
                    if walk["end_time"]:
                        end_dt = datetime.fromisoformat(walk["end_time"].replace('Z', '+00:00'))
                        end_moscow = end_dt.astimezone(moscow_tz)
                        end = end_moscow.strftime("%H:%M")
                        text += f"‚Ä¢ {start} - {end}"
                        if walk.get("location"):
                            text += f" ({walk['location']})"
                    else:
                        text += f"‚Ä¢ –ì—É–ª—è–µ–º —Å {start} üå≥"
                    text += "\n"

            # –ü–æ–¥–≥—É–∑–Ω–∏–∫–∏
            if data.get("diapers"):
                text += "\nüöº *–ü–æ–¥–≥—É–∑–Ω–∏–∫–∏:*\n"
                moscow_tz = pytz.timezone('Europe/Moscow')
                for diaper in data["diapers"]:
                    time_dt = datetime.fromisoformat(diaper["time"].replace('Z', '+00:00'))
                    time_moscow = time_dt.astimezone(moscow_tz)
                    time = time_moscow.strftime("%H:%M")

                    if diaper["type"] == "poop":
                        emoji = "üí©"
                    elif diaper["type"] == "pee":
                        emoji = "üíß"
                    else:
                        emoji = "üöº"

                    text += f"‚Ä¢ {time} {emoji}"
                    if diaper.get("consistency"):
                        text += f" ({diaper['consistency']})"
                    text += "\n"

            if not any([data.get("sleep"), data.get("feeding"), data.get("walks"), data.get("diapers")]):
                text = "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –º–∞–ª—ã—à? üòä"

            await message.answer(text, parse_mode="Markdown")
        else:
            await message.answer("–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üôè")
    except Exception as e:
        logger.error(f"Error in today_handler: {e}")
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî")
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ —á–µ—Ä–µ–∑ /add_child")
        return

    child_id = user_mapping[telegram_id]["child_id"]

    try:
        response = requests.get(f"{ACTIVITY_SERVICE_URL}/activities/child/{child_id}/today")
        if response.status_code == 200:
            data = response.json()

            text = "üìä *–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:*\n\n"

            # –°–æ–Ω
            if data.get("sleep"):
                text += "üò¥ *–°–æ–Ω:*\n"
                moscow_tz = pytz.timezone('Europe/Moscow')
                for sleep in data["sleep"]:
                    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
                    start_dt = datetime.fromisoformat(sleep["start_time"].replace('Z', '+00:00'))
                    start_moscow = start_dt.astimezone(moscow_tz)
                    start = start_moscow.strftime("%H:%M")

                    if sleep["end_time"]:
                        end_dt = datetime.fromisoformat(sleep["end_time"].replace('Z', '+00:00'))
                        end_moscow = end_dt.astimezone(moscow_tz)
                        end = end_moscow.strftime("%H:%M")
                        duration = sleep.get("duration_minutes", 0)
                        hours = duration // 60
                        minutes = duration % 60
                        if hours > 0:
                            duration_str = f"{hours}—á {minutes}–º–∏–Ω"
                        else:
                            duration_str = f"{minutes} –º–∏–Ω"
                        text += f"‚Ä¢ {start} - {end} ({duration_str})\n"
                    else:
                        text += f"‚Ä¢ –°–ø–∏—Ç —Å {start}\n"

            # –ö–æ—Ä–º–ª–µ–Ω–∏–µ
            if data.get("feeding"):
                text += "\nüçº *–ö–æ—Ä–º–ª–µ–Ω–∏—è:*\n"
                for feed in data["feeding"]:
                    time = feed["time"].split("T")[1][:5]
                    text += f"‚Ä¢ {time}"
                    if feed.get("amount_ml"):
                        text += f" - {feed['amount_ml']}–º–ª"
                    if feed.get("food_name"):
                        text += f" ({feed['food_name']})"
                    text += "\n"

            # –ü—Ä–æ–≥—É–ª–∫–∏
            if data.get("walks"):
                text += "\nüö∂ *–ü—Ä–æ–≥—É–ª–∫–∏:*\n"
                for walk in data["walks"]:
                    start = walk["start_time"].split("T")[1][:5]
                    if walk["end_time"]:
                        end = walk["end_time"].split("T")[1][:5]
                        text += f"‚Ä¢ {start} - {end}"
                        if walk.get("location"):
                            text += f" ({walk['location']})"
                    else:
                        text += f"‚Ä¢ –ì—É–ª—è–µ—Ç —Å {start}"
                    text += "\n"

            if not any([data.get("sleep"), data.get("feeding"), data.get("walks")]):
                text = "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è"

            await message.answer(text, parse_mode="Markdown")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"Error in today_handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dp.message(Command("help"))
async def help_handler(message: Message):
    """–ü–æ–º–æ—â—å"""
    help_text = """
*–Ø –ê–ª–∏—Å–∞, –≤–∞—à–∞ –ø–æ–º–æ—â–Ω–∏—Ü–∞* ü§±

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/add_child - –¥–æ–±–∞–≤–∏—Ç—å –º–∞–ª—ã—à–∞
/today - —á—Ç–æ –±—ã–ª–æ —Å–µ–≥–æ–¥–Ω—è
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:*
‚Ä¢ "—É—Å–Ω—É–ª" - –∑–∞–ø–∏—à—É –Ω–∞—á–∞–ª–æ —Å–Ω–∞
‚Ä¢ "–ø—Ä–æ—Å–Ω—É–ª—Å—è" - –æ—Ç–º–µ—á—É –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ
‚Ä¢ "–ø–æ–∫–æ—Ä–º–∏–ª–∞" - –∑–∞–ø–∏—à—É –∫–æ—Ä–º–ª–µ–Ω–∏–µ
‚Ä¢ "–≥—É–ª—è–µ–º" - –æ—Ç–º–µ—á—É –ø—Ä–æ–≥—É–ª–∫—É
‚Ä¢ "–ø–æ–∫–∞–∫–∞–ª" - –∑–∞–ø–∏—à—É —Å–º–µ–Ω—É –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞
‚Ä¢ "–ø–æ–ø–∏—Å–∞–ª" - –æ—Ç–º–µ—á—É –º–æ–∫—Ä—ã–π –ø–æ–¥–≥—É–∑–Ω–∏–∫

*–ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:*
‚Ä¢ —Å–ø–∏—Ç —Å 14:30
‚Ä¢ —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–æ—Å–Ω—É–ª—Å—è
‚Ä¢ –ø–æ–∫–æ—Ä–º–∏–ª–∞ –≥—Ä—É–¥—å—é
‚Ä¢ –≤—ã–ø–∏–ª 200–º–ª —Å–º–µ—Å–∏
‚Ä¢ –≥—É–ª—è–µ–º –≤ –ø–∞—Ä–∫–µ

–Ø –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º –∏ –ø–æ–º–æ–≥—É! üíï
"""
    await message.answer(help_text, parse_mode="Markdown")


@dp.message()
async def message_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    telegram_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º–∞–ø–ø–∏–Ω–≥–µ
    if telegram_id not in user_mapping:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ë–î
        try:
            response = requests.get(f"{ACTIVITY_SERVICE_URL}/users/telegram/{telegram_id}")
            if response.status_code == 200:
                user = response.json()
                children_response = requests.get(f"{ACTIVITY_SERVICE_URL}/children/user/{user['id']}")
                children = children_response.json()
                if children:
                    child = children[0]
                    user_mapping[telegram_id] = {"user_id": user["id"], "child_id": child["id"]}
                else:
                    await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ —á–µ—Ä–µ–∑ /add_child")
                    return
            else:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
                return
        except:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return

    child_id = user_mapping[telegram_id]["child_id"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ NLP service
    try:
        nlp_data = {
            "message": message.text,
            "child_id": child_id,
            "user_id": user_mapping[telegram_id]["user_id"],
            "telegram_chat_id": message.chat.id
        }

        response = requests.post(f"{NLP_SERVICE_URL}/process", json=nlp_data)

        if response.status_code == 200:
            result = response.json()
            if result.get("success"):
                await message.answer(result["response"])
            else:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {result.get('response', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        else:
            await message.answer("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        logger.error(f"Error in message_handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("Starting bot...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())